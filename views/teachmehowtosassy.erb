<!DOCTYPE html>
<!--[if lt IE 7 ]><html class="ie ie6" lang="en"> <![endif]-->
<!--[if IE 7 ]><html class="ie ie7" lang="en"> <![endif]-->
<!--[if IE 8 ]><html class="ie ie8" lang="en"> <![endif]-->
<!--[if (gte IE 9)|!(IE)]><!--><html lang="en"> <!--<![endif]-->
<head>

	<!-- Basic Page Needs
  ================================================== -->
	<meta charset="utf-8">
	<title>Teach Me How To Sassy</title>
	<meta name="description" content="">
	<meta name="author" content="">

	<!-- Mobile Specific Metas
  ================================================== -->
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

	<!-- CSS
  ================================================== -->
  <link rel="stylesheet" href="stylesheets/css/teachmehowtosassy.css">
	<link rel="stylesheet" href="stylesheets/skeleton/base.css">
	<link rel="stylesheet" href="stylesheets/skeleton/skeleton.css">
	<link rel="stylesheet" href="stylesheets/skeleton/layout.css">

	<!--[if lt IE 9]>
		<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->

	<!-- Favicons
	================================================== -->
	<link rel="shortcut icon" href="images/favicon.ico">
	<link rel="apple-touch-icon" href="images/apple-touch-icon.png">
	<link rel="apple-touch-icon" sizes="72x72" href="images/apple-touch-icon-72x72.png">
	<link rel="apple-touch-icon" sizes="114x114" href="images/apple-touch-icon-114x114.png">

</head>
<body>



	<!-- Primary Page Layout
	================================================== -->

	<!-- Delete everything in this .container and get started on your own site! -->

	<div class="container">
		<div class="sixteen columns">
		  <div class="center">(yes, I know this is unstyled. we'll do a little with it later. haters gonna hate...)</div>
			<h1 class="remove-bottom" style="margin-top: 40px">Why SASS/SCSS?</h1>
			<h5>Love at first type</h5>
			<hr />
		</div>
		<div class="sixteen columns section1">
			<h3>The Problem</h3>
			<p>- We need structure, organization, and efficiency.</p>
			<p>- CSS is <em>not</em> a programming language (don't quote Turing completeness, thanks!).</p>
			<p>Common complaints:</p>
			<ul class="square">
			  <li>"I have oodles of noodles of spaghetti code, and I absolutely dread maintaining it."</li>
			  <li>"I know how to rock some CSS, but I get sick of changing something in 1 place and having to change it in a dozen other places."</li>
			  <li>"Why must I painfully copy and paste blocks of code over and over again? Is there not a better way?"</li>
			</ul>
			<p>Oh, and I almost forgot:</p>
			<ul class="square">
			  <li><a href="http://hsivonen.iki.fi/vendor-prefixes/" target="_new"><em><strong>Vendor prefixing sucks</strong></a> (to remember and implement... web standards will catch up eventually).</em></li>
			</ul>
		</div>
		<div class="center"><h1>//</h1></div>
		<div class="sixteen columns section2">
			<h3>The (Current) Solution: Preprocessors</h3>
			<p>Thanks to wonderful people, like Hampton Catlin, Nathan Weizenbaum, and <a href="https://twitter.com/#!/chriseppstein" target="_new">Chris Eppstein</a>, we have wonderful tools like SASS. There are a few other choices in the field, like LESS (which is <a href="http://twitter.github.com/bootstrap/less.html" target="_new">utilized most prominently by Twitter's Bootstrap)</a> and Stylus. If you want side-by-side comparisons of these tools, check out the <a href="http://net.tutsplus.com/tutorials/html-css-techniques/sass-vs-less-vs-stylus-a-preprocessor-shootout/" target="_new">SASS vs LESS vs Stylus Shootout</a>.</p>
			<p>SASS (as well as other preprocessors) work by compiling code to a given output--in this case, CSS. The compiled CSS is compatible with practically every version of CSS...ever.</p>
			<p>With SASS, designers and developers are able to utilize many aspects of general programming/scripting, such as the use of <strong>variables</strong>, <strong>iterating</strong> over lists, <strong>inheritance</strong>, <strong>functions</strong>, among other things.</p>
      <p>What are the advantages?</p>
      <ul class="square">
        <li>Reduced code base</li>
        <li>Recyclable code</li>
        <li>Speedy feature turnaround</li>
      </ul>
		</div>
		<div class="center"><h1>//</h1></div>
		<div class="sixteen columns section3">
			<h1 class="remove-bottom" style="margin-top: 40px">How do I get set up?</h1>
			<hr />
		</div>
	  <div class="one-third column section4">
      <h3>Don't Fear the Console</h3>
      <img src="images/reaper.gif" />
	  </div>
	  <div class="two-thirds column section5">
      <h3>BUT IT'S SCARY MATRIX STUFF, AMIRITE??</h3>
      <p>It is not the Matrix (but how would you know if it was?), and it, unfortunately, does not involve some Tron-esque colored clothing lines. Then again, a lot of the lines of output ARE quite colorful...</p>
      <img src="images/nyancat.png" />
      <img src="images/nyancatflew.png" />
	  </div>
	  <div class="clear"></div>
	  <div class="center"><h1>//</h1></div>
	  <div class="one-third column section6">
      <h3>Pre-requisites</h3>
      <p>Here's a list of what you need. If you're feeling lost, <a href="http://www.google.com" target="_new">Google is your friend</a>.</p>
      <ol>
        <li>Ruby!!!</li>
        <ul class="square">
          <li>Mac OS X >= 10.5 ships with some Ruby already installed.</li>
          <li>Honestly, though, you Mac-ers should be using the Ruby Version Manager: <a href="http://net.tutsplus.com/tutorials/ruby/how-to-install-ruby-on-a-mac/" target="_new">How to install Ruby on a Mac</a></li>
          <li>Windows bums: use the <a href="http://rubyforge.org/frs/?group_id=167" target="_new">One-Click Ruby Installer</a></li>
        </ul>
        <li>If you don't already have RubyGems on your system, you can grab it here: <a href="http://www.rubygems.org/" target="_new">RubyGems</a></li>
      </ol>
      <p>In your console (aka Terminal), you can check to see if Ruby is installed by typing:</p>
      <p>$ ruby -v</p>
	  </div>
	  <div class="two-thirds column section7">
      <h3>Gettin' Sassy</h3>
      <p>Once you've got all that jazz ready to rock, all you have to do is:</p>
      <pre>
        $ gem install sass
        $ mv my_file.css my_new_sassy_file.scss
        $ sass --watch my_new_sassy_file.scss:my_file.css
      </pre>
      <p>The "--watch" part is a process that runs on your system which monitors the SCSS file for changes.</p>
      <h2>"But wait--what is this SCSS business? I thought we were learning SASS??"</h2>
    </div>
    <div class="clear"></div>
    <div class="center"><h1>//</h1></div>
    <div class="sixteen columns section8">
      <h1 class="remove-bottom">SASS vs SCSS &amp; Why</h1>
      <hr />
    </div>
    <div class="one-third column section9">
      <p>SCSS is the newer version of SASS.</p>
      <p>SASS, based off of the HAML project, utilizes nesting and whitespace in order to give developers some sexy style sheets. Here is an example:</p>
      <script src="https://gist.github.com/2506102.js?file=gistfile1.sass"></script>
    </div>
    <div class="one-third column section10">
      <p>Note how there are no curly mustache-braces, nor are there any semi-colons.</p>
      <p>Here, however, we have practically the same code, but with the inclusion of colons and braces. This is SCSS.
      <p>Ignore the dollar sign things for now:</p>
      <script src="https://gist.github.com/2506135.js?file=gistfile1.sass"></script>
    </div>
    <div class="one-third column section11">
      <p>Here is that same code in CSS (for reference):</p>
      <br />
      <br />
      <br />
      <script src="https://gist.github.com/2506157.js?file=gistfile1.css"></script>
    </div>
    <div class="clear"></div>
    <div class="center"><h1>//</h1></div>
    <div class="sixteen columns section12">
      <h3>Any valid CSS3 file can be changed to an SCSS file and work out of the box.</h3>
      <div class="center">
        <h5>This makes the transition from CSS to SCSS practically effortless.</h5>
      </div>
    </div>
    <div class="clear"></div>
    <div class="center"><h1>//</h1></div>
    <div class="sixteen columns section13">
      <h1>Now, let's learn something!</h1>
      <hr />
    </div>
    <div class="sixteen columns section14">
      <h3>Variables!!!</h3>
      <p>In math, programming, and the rest of the world, variables are containers for specific attributes or values that can be reused over and over again without having to redefine that original attribute every time.</p>
      <p>Variables are a programming norm and have recently made their way in to draft status for inclusion into standard CSS; however, they're not quite there.</p>
      <p>SASS handles variables like so:</p>
    </div>
    <div class="one-third column">
      <script src="https://gist.github.com/2506320.js?file=gistfile1.css"></script>
    </div>
    <div class="one-third column">
      <p>You declare a SASS variable by prepending the variable name with a dollar sign ($). You will always refer to a variable by first using that dollar sign.</p>
    </div>
    <div class="one-third column">
      <script src="https://gist.github.com/2506359.js?file=gistfile1.scss"></script>
    </div>
    <div class="clear"></div>
    <div class="center"><h1>//</h1></div>
    <div class="sixteen columns section15">
      <h3>Lists!!!</h3>
      <p>Everybody has lists--grocery lists, to-do lists, things to fail at lists, etc.</p>
      <p>SASS handles lists like so:</p>
    </div>
    <div class="one-third column">
      <script src="https://gist.github.com/2506411.js?file=gistfile1.scss"></script>
    </div>
    <div class="one-third column">
      <p>SASS lists look exactly like variables except that you are providing multiple values.</p>
    </div>
    <div class="clear"></div>
    <div class="center"><h1>//</h1></div>
    <div class="one-third column">
      <h3>Loops!!!</h3>
      <p><strong>But what good are lists if you can't iterate through them?</strong> Oh wait, you can.</p>
      <script src="https://gist.github.com/2506609.js?file=gistfile1.scss"></script>
    </div>
    <div class="one-third column">
      <h3>@for and @while loops</h3>
      <p>More programming basics...:</p>
      <br />
      <script src="https://gist.github.com/2506434.js?file=gistfile1.scss"></script>
    </div>
    <div class="clear"></div>
    <div class="center"><h1>//</h1></div>
    <div class="sixteen columns section16">
      <h1>On to the good stuff...</h1>
      <h5>Loops have their place, and SASS has much to offer</h5>
      <hr />
    </div>
    <div class="two-thirds column section17">
      <h3>Selector Inheritance</h3>
      <p>SI? Wtf is that?</p>
      <p>In normal-talk, it's a way of extending the static functionality of a CSS class or ID definition into another CSS class or ID definition without having to duplicate code.</p>
      <p>A given class may inherit the styles of another class by having that class "extended" unto it. Like so:</p>
      <script src="https://gist.github.com/2506692.js?file=gistfile1.scss"></script>
    </div>
    <div class="one-third column" style="margin-top:225px;">
      <p>When this puppy compiles, it then gives all of the style attributes of ease-in-out to the logo-container ID.</p>
    </div>
	  <div class="clear"></div>
	  <div class="center"><h1>//</h1></div>
    <div class="two-thirds column section18">
      <h3>Mixins</h3>
      <p>These are not parties where boys meet girls.</p>
      <p>Mixins are like selector inheritance on crack. Sometimes, extending a class is simply not enough. Mixins allow you to pass arguments, for example, and are one of the best features of SASS (IMO).</p>
      <p>Here, we are going to get a look at how awesome SASS really is:</p>
      <script src="https://gist.github.com/2506767.js?file=gistfile1.scss"></script>
    </div>
    <div class="one-third column" style="margin-top:225px;">
      <p>We utilize a mixin by "including" it where we need it. Within the parentheses, we pass an argument up to the border-radius mixin we created, which accepts an argument, which it automatically names $amount, and applies the argument to the specific styles.</p>
    </div>
    <div class="two-thirds column">
      <p>And here is what that SCSS compiles to (scroll to the right!):</p>
      <script src="https://gist.github.com/2506803.js?file=gistfile1.css"></script>
    </div>
    <div class="one-third column" style="margin-top:50px;">
      <p>You can begin to see how, throughout an entire project, you can abstract all of your vendor prefixes, for example, to mixins. This makes life much, much easier.</p>
      <p>But what about if you have some vendor prefixes that don't accept the same value? SASS can do math.</p>
      <script src="https://gist.github.com/2506833.js?file=gistfile1.scss"></script>
      <p>compiles to...(scroll to the right!)</p>
      <script src="https://gist.github.com/2506841.js?file=gistfile1.css"></script>
    </div>
	  <div class="clear"></div>
	  <div class="center"><h1>//</h1></div>
    <div class="two-thirds column section19">
      <h3>Interpolation</h3>
      <p>Has nothing to do with Interpol.</p>
      <p>This is just a fancy word for saying, "I want to put shit inside different shit."</p>
      <p>SASS takes a note out of the Ruby handbook by designating code to be escaped and ran by encasing it in #{}</p>
      <p>Below, we are going to combine a number of the things we've learned today, in addition to interpolation:</p>
      <script src="https://gist.github.com/2506941.js?file=gistfile1.scss"></script>
      <p>compiles to...</p>
      <script src="https://gist.github.com/2506959.js?file=gistfile1.css"></script>
    </div>
	  <div class="clear"></div>
	  <div class="center"><h1>//</h1></div>
    <div class="two-thirds column section20">
      <h3>Functions, @if statements, and @return</h3>
      <p>Sometimes, you just need a good function to perform logic and return something if a condition is met.</p>
      <p>Here's an example which utilizes list iteration, interpolation, a mixin, and a function:</p>
      <script src="https://gist.github.com/2507078.js?file=gistfile1.scss"></script>
      <p>compiles to...</p>
      <script src="https://gist.github.com/2507086.js?file=gistfile1.css"></script>
    </div>
    <div class="one-third column" style="margin-top:225px;">
      <p>This might look like a lot of SCSS to accomplish what looks like a little. However, this is an example of a solution that could potentially be scalable, given there were hundreds of sections in the list.</p>
    </div>
	  <div class="clear"></div>
	  <br />
	  <br />
	  <hr />
	  <div class="center"><h3>If you can't tell, this is last minute stuff. Remind me to talk about partials</h3></div>
	  <div class="center"><h1>/////////////////////////////////////////</h1></div>
	  <div class="center"><h1>I will now explain <a href="http://www.getskeleton.com" target="_new">Skeleton</a>, <a href="http://twitter.github.com/bootstrap/" target="_new">Twitter Bootstrap</a>, and <a href="http://960.gs/" target="_new">960</a> and then move forward with the workshop via live-coding.</h1></div>
	  <div class="center"><h1>/////////////////////////////////////////</h1></div>

	</div><!-- container -->



	<!-- JS
	================================================== -->
	<script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
	<script src="javascripts/tabs.js"></script>

<!-- End Document
================================================== -->
</body>
</html>